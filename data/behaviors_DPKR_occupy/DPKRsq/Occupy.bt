{
  "name": "Wait and listen",
  "id": "bb7acc50-d490-4bdb-8ace-e6455447c2ff",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "cc857240-5958-486f-baba-752e10f400da",
      "type": "waitForever"
    },
    {
      "name": "Recalculate Leader",
      "id": "77052674-e422-4288-8585-60fef9af3424",
      "type": "scriptAction",
      "script": [
        "if Leader ==nil or not Leader:IsAlive() then",
        "    local soldiers = {}",
        "    for fireteam in self:GetChildGroups() do",
        "        for soldier in fireteam:GetEntities() do",
        "            if soldier:IsAlive() then",
        "                loc.Leader = soldier",
        "            end",
        "        end",
        "    end",
        "end"
      ]
    },
    {
      "name": "False propagation obfuscator",
      "id": "43baea11-36d0-4994-897d-01e5837c8eec",
      "type": "selector",
      "subtrees": [
        {
          "name": "Path calculation",
          "id": "692d40b2-8af1-4d2e-9809-ede698ffb4e4",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Recalculate path",
              "id": "12a83bea-54bc-4d50-a7ae-de9f24dc4104",
              "type": "scriptAction",
              "script": [
                "if  loc.pathFuture ==nil  then",
                "loc.pathFuture = FindPath(loc.Leader:GetPosition(),arg.orderData.destination)",
                "end"
              ]
            },
            {
              "name": "GetRecalculatedPath",
              "id": "05a55c3f-c30b-4013-83f5-f9e5f1cdeaa3",
              "type": "waitUntil",
              "condition": [
                "if loc.pathFuture:IsReady() == true then",
                "loc.path = loc.pathFuture:Value()",
                "loc.pathFuture =nil",
                "loc.waypoints = {}",
                "local segmentLenght = 25",
                "local count = 0",
                "for loopvar = 0, loc.path:Length(), segmentLenght do",
                "   loc.waypoints[count] = loc.path:PositionAlongPath(loopvar);",
                "   count = count+1",
                "end",
                "return true",
                "end",
                "return false"
              ]
            }
          ],
          "decorators": [
            {
              "id": "9feb76c7-09f8-4b69-a508-23da4d4b2067",
              "type": "scriptCondition",
              "name": "Recalculation needed?",
              "script": [
                "return loc.path ==nil and arg.orderData ~=nil and arg.orderData.destination ~=nil --Add a check if the waypoint is changed maybe"
              ]
            }
          ]
        },
        {
          "name": "Wait Forever",
          "id": "38853c79-4539-4181-a6c9-341f793e4513",
          "type": "waitForever"
        }
      ],
      "active": true
    },
    {
      "name": "DrawPath",
      "id": "55eb707c-ab19-4241-8751-94fdc1a525c8",
      "type": "scriptAction",
      "script": [
        "if loc.path ~=nil then",
        "ai_core_public.draw.Path(loc.path,1,0,0,1,Vec3(0,0,2))",
        "",
        "for n,point in pairs(loc.waypoints) do",
        "ai_core_public.draw.Circle(point+Vec3(0,0,2),1,1,1,0,1)",
        "end",
        "",
        "end"
      ]
    },
    {
      "name": "Recalculate teams",
      "id": "d019e76b-5965-47ab-b373-b12a264286a9",
      "type": "scriptAction",
      "script": [
        "if #loc.locations ~= self:GetChildGroupCount() then",
        "for member in self:GetChildGroups() do",
        "loc.locations[member] = 0--TODO: detect location on path",
        "end",
        "end"
      ]
    },
    {
      "name": "False propagation obfuscator",
      "id": "2f863c48-2dd1-4778-854d-2ef579b6162e",
      "type": "selector",
      "subtrees": [
        {
          "name": "-",
          "id": "04ad5dba-013f-4c6e-86b1-349908311728",
          "type": "sequence",
          "subtrees": [
            {
              "name": "TODO forge data for reference",
              "id": "07b1df52-a809-4cd7-817e-c8097dcd5b29",
              "type": "scriptAction",
              "script": [
                "local min = 99999",
                "local minteam",
                "for group in self:GetChildGroups() do",
                "    if loc.locations[group]<min then",
                "        min = loc.locations[group]",
                "        minteam = group",
                "    end",
                "end",
                "loc.GroupToMove = minteam"
              ]
            },
            {
              "name": "Clear area for all subordinates",
              "id": "70db8549-ee79-43dc-adbc-b3a12f2f103a",
              "type": "reference",
              "target": [
                "standard_behaviors",
                "ExecuteSubordinateOrder"
              ],
              "arguments": {
                "orderData": "return {orderName = \"Advance\"}",
                "subordinates": "return loc.GroupToMove",
                "subordinateData": "return  {}",
                "update": "return false"
              }
            }
          ],
          "decorators": [
            {
              "id": "06cdba28-6b55-49c4-8276-f8166a380aa1",
              "type": "scriptCondition",
              "name": "Is movement slot available?",
              "script": [
                "return loc.MovingTeam == nil"
              ]
            }
          ]
        },
        {
          "name": "Wait Forever",
          "id": "897ad745-3cd4-4d63-91fc-bbcf65f97122",
          "type": "waitForever"
        }
      ],
      "active": true
    },
    {
      "name": "DrawLine",
      "id": "c47d1afc-4596-449d-8157-12c572064899",
      "type": "scriptAction",
      "script": [
        "if arg.orderData ~=nil and arg.orderData.destination ~=nil then",
        "\tlocal node = self",
        "\twhile type(node) == \"GroupBrain\" or type(node) == \"Group\" do",
        "\t\tif node:GetEntityCount()==0 and node:GetChildGroupCount()~=0 then",
        "\t\t\tnode = node:GetChildGroup(0)",
        "\t\telseif node:GetEntityCount()~=0 then",
        "\t\t\tDebugLine(node:GetEntity(0):GetPosition()+Vec3(0,0,2),arg.orderData.destination+Vec3(0,0,2), 1, 0, 0, 1)",
        "\t\t\treturn true",
        "\t\tend",
        "\tend",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "bb7acc50-d490-4bdb-8ace-e6455447c2ff",
        "position": "1825,305"
      },
      {
        "id": "cc857240-5958-486f-baba-752e10f400da",
        "position": "1062.5,342.5"
      },
      {
        "id": "77052674-e422-4288-8585-60fef9af3424",
        "position": "1259.65811068017,523.238095238095"
      },
      {
        "id": "43baea11-36d0-4994-897d-01e5837c8eec",
        "position": "1500,555"
      },
      {
        "id": "692d40b2-8af1-4d2e-9809-ede698ffb4e4",
        "position": "1387.5,655"
      },
      {
        "id": "12a83bea-54bc-4d50-a7ae-de9f24dc4104",
        "position": "1275,817.5"
      },
      {
        "id": "05a55c3f-c30b-4013-83f5-f9e5f1cdeaa3",
        "position": "1462.5,817.5"
      },
      {
        "id": "38853c79-4539-4181-a6c9-341f793e4513",
        "position": "1562.5,742.5"
      },
      {
        "id": "55eb707c-ab19-4241-8751-94fdc1a525c8",
        "position": "1725,555"
      },
      {
        "id": "d019e76b-5965-47ab-b373-b12a264286a9",
        "position": "1887.5,555"
      },
      {
        "id": "2f863c48-2dd1-4778-854d-2ef579b6162e",
        "position": "2050,542.5"
      },
      {
        "id": "04ad5dba-013f-4c6e-86b1-349908311728",
        "position": "1987.5,667.5"
      },
      {
        "id": "07b1df52-a809-4cd7-817e-c8097dcd5b29",
        "position": "1762.5,855"
      },
      {
        "id": "70db8549-ee79-43dc-adbc-b3a12f2f103a",
        "position": "2000,817.5"
      },
      {
        "id": "897ad745-3cd4-4d63-91fc-bbcf65f97122",
        "position": "2400,830"
      },
      {
        "id": "c47d1afc-4596-449d-8157-12c572064899",
        "position": "2287.5,517.5"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2567.5",
    "gridPadding": "0,5"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "path": "nil",
    "MovingTeam": "nil",
    "locations": "return {}",
    "pathFuture": "nil",
    "waypoints": "nil",
    "Leader": "nil",
    "GroupToMove": "nil",
    "STMData": "nil"
  }
}
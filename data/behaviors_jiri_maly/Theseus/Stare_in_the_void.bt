{
  "name": "Wait and listen",
  "id": "aac7685f-a6e1-48f2-9479-bb32b4d10ebb",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "84a07f42-78eb-460c-9ab9-dcffc737164a",
      "type": "waitForever"
    },
    {
      "name": "Check message",
      "id": "c984af80-a12b-4023-aeee-b22069851115",
      "type": "sequence",
      "subtrees": [
        {
          "name": "MinotaurPositionUpdate",
          "id": "a2b0e72e-a85c-4f7d-b6c6-9b2830f0e5dc",
          "type": "messageHandler",
          "handler": [
            "if msg.value.position then",
            "    loc.lastMinPos = msg.value.position",
            "end"
          ]
        },
        {
          "name": "RequestPath",
          "id": "c43c0f9a-7ae4-4029-aa8b-aa117a229a8a",
          "type": "scriptAction",
          "script": [
            "if loc.lastMinPos ~=nil",
            "then",
            "loc.PathFuture = FindPath(self:GetPosition(),loc.lastMinPos)",
            "end"
          ]
        },
        {
          "name": "Await path",
          "id": "d4585c35-63ef-46a5-81d1-6b496f8b4e62",
          "type": "waitUntil",
          "condition": [
            "if loc.PathFuture:IsReady() then",
            "loc.path = loc.PathFuture:Value()",
            "local count = loc.path:GetSegmentCount()",
            "loc.circles = {}",
            "if count>2 then",
            "    for p = 0, count-2 do",
            "        local a = loc.path:GetSegmentStart(p)",
            "        local b = loc.path:GetSegmentStart(p+1)",
            "        local c = loc.path:GetSegmentEnd(p+1)",
            "        local P = b-a",
            "        local Q = c-b",
            "        local ang = P:AngleTo(Q)",
            "        if math.abs(ang)>30 then",
            "            loc.circles[p]=b;",
            "            DebugLog(tostring(loc.circles[0]))",
            "            DebugLog(\"Drawing\")",
            "            DebugLog(tostring(b))",
            "            DebugLog(\"\")",
            "        ",
            "        end",
            "    end",
            "end",
            "",
            "return true",
            "else",
            "return false",
            "end"
          ]
        }
      ]
    },
    {
      "name": "DrawPath",
      "id": "f1982d58-2ea9-4480-a068-26cceeb05bb9",
      "type": "scriptAction",
      "script": [
        "if loc.path ~=nil then",
        "ai_core_public.draw.Path(loc.path,1,0,0,1,Vec3(0,0,2))",
        "",
        "DebugLog(tostring(loc.circles[0]))",
        "for _,point in pairs( loc.circles) do",
        "ai_core_public.draw.Circle(point+Vec3(0,0,2),1,1,1,0,1)",
        "end",
        "",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "aac7685f-a6e1-48f2-9479-bb32b4d10ebb",
        "position": "1768.5,153"
      },
      {
        "id": "84a07f42-78eb-460c-9ab9-dcffc737164a",
        "position": "1587.5,331.5"
      },
      {
        "id": "c984af80-a12b-4023-aeee-b22069851115",
        "position": "1837.5,294"
      },
      {
        "id": "a2b0e72e-a85c-4f7d-b6c6-9b2830f0e5dc",
        "position": "1725,481.5"
      },
      {
        "id": "c43c0f9a-7ae4-4029-aa8b-aa117a229a8a",
        "position": "1937.5,481.5",
        "width": 145.0
      },
      {
        "id": "d4585c35-63ef-46a5-81d1-6b496f8b4e62",
        "position": "2062.5,594"
      },
      {
        "id": "f1982d58-2ea9-4480-a068-26cceeb05bb9",
        "position": "2037.5,294"
      }
    ],
    "editorObjects": [],
    "canvasSize": "3840,2419",
    "gridPadding": "0,6.5"
  },
  "parameters": [],
  "locals": {
    "lastMinPos": "nil",
    "PathFuture": "nil",
    "path": "nil",
    "circles": "return {}"
  }
}